makeCacheMatrix <- function(x = matrix()) {
inv <- NULL                 #initialize inverse as NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x          #function to get matrix x
setinv <- function(inverse) inv <<- inverse
getinv <- function()
inver <- ginv(x)
inver%*%x                    #function to opbtain inverse of the matrix
list(set = set, get = get,
setinv = seinv,
getinv = getinv)
}
}
}
cacheSolve <- function(x, ...) #gets cache data
{
inv <- x$getinv()
if(!is.null(inv)){          #checking whenther inverse is NULL
message("getting cached data!")
return(inv)               #returns inverse value
}
data <- x$get()
inv <- solve(data,...)      #calculates inverse value
x$setinv(inv)
inv                         ## Return a matrix that is the inverse of 'x'
}
f <- makeCacheMatrix(matrix(1:8, 2,4))
f <- makeCacheMatrix(matrix(1:8, 2,4))
f <- makeCacheMatrix(matrix(1:16, 4, 4))
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL                 #initialize inverse as NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x          #function to get matrix x
setinv <- function(inverse) inv <<- inverse
getinv <- function()
inv <- ginv(x)
inver%*%x                    #function to opbtain inverse of the matrix
list(set = set, get = get,
setinv = seinv,
getinv = getinv)
}
cacheSolve <- function(x, ...) #gets cache data
{
inv <- x$getinv()
if(!is.null(inv)){          #checking whenther inverse is NULL
message("getting cached data!")
return(inv)               #returns inverse value
}
data <- x$get()
inv <- solve(data,...)      #calculates inverse value
x$setinv(inv)
inv                         ## Return a matrix that is the inverse of 'x'
}
f <- makeCacheMatrix(matrix(1:16, 4, 4))
f <- makeCacheMatrix(matrix(1:16, 4, 4))
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL                 #initialize inverse as NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x          #function to get matrix x
setinv <- function(inverse) inv <<- inverse
getinv <- function()
inv <- ginv(x)
inve%*%x                    #function to opbtain inverse of the matrix
list(set = set, get = get,
setinv = seinv,
getinv = getinv)
}
cacheSolve <- function(x, ...) #gets cache data
{
inv <- x$getinv()
if(!is.null(inv)){          #checking whenther inverse is NULL
message("getting cached data!")
return(inv)               #returns inverse value
}
data <- x$get()
inv <- solve(data,...)      #calculates inverse value
x$setinv(inv)
inv                         ## Return a matrix that is the inverse of 'x'
}
f <- makeCacheMatrix(matrix(1:16, 4, 4))
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL                 #initialize inverse as NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x          #function to get matrix x
setinv <- function(inverse) inv <<- inverse
getinv <- function()
inv <- ginv(x)
inv%*%x                    #function to opbtain inverse of the matrix
list(set = set, get = get,
setinv = seinv,
getinv = getinv)
}
cacheSolve <- function(x, ...) #gets cache data
{
inv <- x$getinv()
if(!is.null(inv)){          #checking whenther inverse is NULL
message("getting cached data!")
return(inv)               #returns inverse value
}
data <- x$get()
inv <- solve(data,...)      #calculates inverse value
x$setinv(inv)
inv                         ## Return a matrix that is the inverse of 'x'
}
f <- makeCacheMatrix(matrix(1:16, 4, 4))
## Write a short comment describing this function
library(MASS)
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL                 #initialize inverse as NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x          #function to get matrix x
setinv <- function(inverse) inv <<- inverse
getinv <- function()
inv <- ginv(x)
inv%*%x                    #function to opbtain inverse of the matrix
list(set = set, get = get,
setinv = seinv,
getinv = getinv)
}
cacheSolve <- function(x, ...) #gets cache data
{
inv <- x$getinv()
if(!is.null(inv)){          #checking whenther inverse is NULL
message("getting cached data!")
return(inv)               #returns inverse value
}
data <- x$get()
inv <- solve(data,...)      #calculates inverse value
x$setinv(inv)
inv                         ## Return a matrix that is the inverse of 'x'
}
f <- makeCacheMatrix(matrix(1:16, 4, 4))
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL                 #initialize inverse as NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x          #function to get matrix x
setinv <- function(inverse) inv <<- inverse
getinv <- function() {inv}
#function to opbtain inverse of the matrix
list(set = set, get = get,
setinv = seinv,
getinv = getinv)
}
cacheSolve <- function(x, ...) #gets cache data
{
inv <- x$getinv()
if(!is.null(inv)){          #checking whenther inverse is NULL
message("getting cached data!")
return(inv)               #returns inverse value
}
data <- x$get()
inv <- solve(data,...)      #calculates inverse value
x$setinv(inv)
inv                         ## Return a matrix that is the inverse of 'x'
}
f <- makeCacheMatrix(matrix(1:16, 4, 4))
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL                 #initialize inverse as NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x          #function to get matrix x
setinv <- function(inverse) inv <<- inverse
getinv <- function() {inv}
#function to opbtain inverse of the matrix
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
cacheSolve <- function(x, ...) #gets cache data
{
inv <- x$getinv()
if(!is.null(inv)){          #checking whenther inverse is NULL
message("getting cached data!")
return(inv)               #returns inverse value
}
data <- x$get()
inv <- solve(data,...)      #calculates inverse value
x$setinv(inv)
inv                         ## Return a matrix that is the inverse of 'x'
}
cacheSolve <- function(x, ...) #gets cache data
{
inv <- x$getinv()
if(!is.null(inv)){          #checking whenther inverse is NULL
message("getting cached data!")
return(inv)               #returns inverse value
}
data <- x$get()
inv <- solve(data,...)      #calculates inverse value
x$setinv(inv)
inv                         ## Return a matrix that is the inverse of 'x'
}
f <- makeCacheMatrix(matrix(1:16, 4, 4))
f$
f$get()
f$get()
f$getinv()
cacheSolve(f)
cacheSolve(f)
f$getinv()
cacheSolve(f)
f <- makeCacheMatrix(matrix(1:4, 2, 2))
f$get()
f$getinv()
cacheSolve(f)
cacheSolve(f)
cacheSolve(f)
f <- makeCacheMatrix(matrix(1:16, 4, 4))
f$get()
f$getinv()
cacheSolve(f)
cacheSolve(f)
f <- makeCacheMatrix(matrix(1:8, 4, 2))
f$get()
f$getinv()
cacheSolve(f)
cacheSolve(f)
f$get()
f$getinv()
cacheSolve(f)
cacheSolve(f)
f <- makeCacheMatrix(matrix(1:16, 4, 4))
f$get()
f$getinv()
cacheSolve(f)
f <- makeCacheMatrix(matrix(1:9, 3, 3))
f$get()
f$getinv()
cacheSolve(f)
cacheSolve(f)
f <- makeCacheMatrix(matrix(1:4, 2, 2))
f <- makeCacheMatrix(matrix(1:4, 2, 2))
f$get()
f$getinv()
cacheSolve(f)
cacheSolve(f)
f <- makeCacheMatrix(matrix(1:8, 2, 4))
f$get()
f$getinv()
cacheSolve(f)
f <- makeCacheMatrix(matrix(1:8, 2, 4))
f$get()
f$getinv()
cacheSolve(f)
f <- makeCacheMatrix(matrix(1:8, 2, 2))
f$get()
f$getinv()
cacheSolve(f)
f <- makeCacheMatrix(matrix(1:4, 2, 2))
f$get()
f$getinv()
cacheSolve(f)
